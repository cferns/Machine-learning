from __future__ import division
import numpy as np
import random
import copy
import csv
from sklearn.datasets import load_svmlight_file
import projectFunctions

def readFile(filepath):
    csrMatrix, labelsTemp = load_svmlight_file(filepath)
    #following line is to convert folat64 to int32; not required
    labels = np.array(labelsTemp)
    matRix = csrMatrix.toarray()
    #rowsM, colsM = matRix.shape
    for i in range(len(labels)):
        labels[i] = 2*labels[i]-1
    return matRix, labels

def weightFunction(weightCondition, cols):
    if weightCondition is 'ones':
        w = np.ones(cols, dtype=np.float)
    return w

def simpleWinnow(matRix, labels, weightCondition, r):
    rows = len(matRix)
    cols = len(matRix[0])
    numUpdates = 0
    w = weightFunction(weightCondition, cols)
    for r_ind in range(rows):
        currExample = matRix[r_ind]
        y_pred = np.sign(np.dot(w,currExample)-cols) #Q = cols
        y_actual = labels[r_ind]
        #Decision
        if y_actual == +1 and y_pred == -1:
            for i in range(len(currExample)):
                if currExample[i] != 0:
                    w[i] = r*w[i]
            numUpdates += 1
        if y_actual == -1 and y_pred == +1:
            for i in range(len(currExample)):
                if currExample[i] != 0:
                    w[i] = w[i]/r
            numUpdates += 1
    return w, numUpdates

def factoredWinnow(matRix, labels, weightCondition, r):
    rows = len(matRix)
    cols = len(matRix[0])
    numUpdates = 0
    w = weightFunction(weightCondition, cols)
    for r_ind in range(rows):
        #Perceptron decision
        currExample = matRix[r_ind]
        y_pred = np.sign(np.dot(w,currExample)-cols) #Q = cols
        y_actual = labels[r_ind]
        #Decision
        if y_actual == +1 and y_pred == -1:
            for i in range(len(currExample)):
                if currExample[i] != 0:
                    w[i] = r*w[i]*currExample[i]
                    numUpdates += 1
        if y_actual == -1 and y_pred == +1:
            for i in range(len(currExample)):
                if currExample[i] != 0:
                    w[i] = w[i]*currExample[i]/r
                    numUpdates += 1
    return w, numUpdates