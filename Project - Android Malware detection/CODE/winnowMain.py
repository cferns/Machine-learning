from __future__ import division
import percepFunctions
import winnowFunctions
import treeFunctions
import projectFunctions
from collections import Counter
import timeit
import crossValidationExperiments
import numpy as np
import scipy
import operator
import featureTRANSFORM

train_matrix, train_labels, test_matrix, test_labels, eval_matrix, eval_labels = featureTRANSFORM.eliminateZEROfetures('01',-1)


print '\n------------------ Winnow: ------------------'
w_train, numUpdates = winnowFunctions.simpleWinnow(train_matrix, train_labels, 'ones', 2)
train_pred_labels = projectFunctions.prediction_Winnow(train_matrix, train_labels, w_train)
train_accuracy = projectFunctions.accuracyMETRIC(train_labels, train_pred_labels)
dummy, fummy, train_f1_score = projectFunctions.f1METRIC(train_labels, train_pred_labels)
print 'Accuracy : train: ', train_accuracy
#Prediction on test
test_pred_labels = projectFunctions.prediction_Winnow(test_matrix, test_labels, w_train)
test_accuracy = projectFunctions.accuracyMETRIC(test_labels, test_pred_labels)
test_f1_score = projectFunctions.f1METRIC(test_labels, test_pred_labels)
print 'Accuracy : test: ', test_accuracy
#Prediction on eval.anon
eval_pred_labels = projectFunctions.prediction_Winnow(eval_matrix, eval_labels, w_train)
eval_accuracy = projectFunctions.accuracyMETRIC(eval_labels, eval_pred_labels)
eval_f1_score = projectFunctions.f1METRIC(eval_labels, eval_pred_labels)
print 'Accuracy : eval.anon: ', eval_accuracy
#Write leaderboard file
#projectFunctions.write_solutions(eval_pred_labels,"simpleWinnow.csv")

'''

print '\n------------------ Simple Perceptron w Epochs: ------------------'
learningRate = 0.4
margin = 0
maxEpochs = 100
simple_10e_info = percepFunctions.algoFORepochs(maxEpochs, train_filepath, test_filepath, eval_anon_filepath,'winnow', learningRate, margin)

#
solution_filename = raw_input('Enter x__x in ./solutions_log/x__x_solutions.csv: ')
#Write leaderboard file
my_list = []
for list_ in simple_10e_info[1:]:
    my_list.append(list_[5])
max_testacc_index, value = max(enumerate(my_list), key=operator.itemgetter(1))
w_val = simple_10e_info[int(max_testacc_index+1)][9]
eval_pred_labels = projectFunctions.prediction_Winnow(eval_matrix, eval_labels, w_val)
projectFunctions.write_solutions(eval_pred_labels,'./solutions_log/solutions/'+solution_filename+'.solutions.csv')
#Write info array
filepath = './solutions_log/simple_50e_infolist.txt'
thefile = open('./solutions_log/infoARRAY/'+solution_filename+'.infoARRAY.csv', 'w')
for item in simple_10e_info:
  thefile.write("%s\n" % item)
thefile.close()

print 'best num of epochs:', max_testacc_index+1
print 'best train acc:', simple_10e_info[int(max_testacc_index+1)][3]
print 'best test acc:', value
print 'best eval acc: ',simple_10e_info[int(max_testacc_index+1)][7]
print 'best eval f1: ',simple_10e_info[int(max_testacc_index+1)][8]
end_time = timeit.default_timer()
print 'total time to run code: ', end_time - start_time
'''