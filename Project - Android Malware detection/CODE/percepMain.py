import percepFunctions
import projectFunctions
from collections import Counter
import timeit
import crossValidationExperiments
import numpy as np
import scipy
import operator
import featureTRANSFORM




#Read DATA    featureCASE  is 01  or  w    , outputCASE  is -1 or +1
#train_matrix, train_labels, test_matrix, test_labels, eval_matrix, eval_labels = featureTRANSFORM.originalDATA('01',-1)#(featureCASE, labelCASE)
#
# #(featureCASE, labelCASE)
#train_matrix, train_labels, test_matrix, test_labels, eval_matrix, eval_labels = featureTRANSFORM.onlyNORMALIZE(-1, 1)#(labelCASE, stdConstant)
#train_matrix, train_labels, test_matrix, test_labels, eval_matrix, eval_labels = featureTRANSFORM.eliminateZEROandNORMALIZE(-1, 1)#(labelCASE, stdConstant)
#train_matrix, train_labels, test_matrix, test_labels, eval_matrix, eval_labels = featureTRANSFORM.eliminateBADfeaturesWITHperceptron('01',-1, -0.01)#(finalFeatureCASE,labelCASE, thresholdBIAS)
train_matrix, train_labels, test_matrix, test_labels, eval_matrix, eval_labels = featureTRANSFORM.eliminateZEROfetures('01',-1)

'''
from sklearn.feature_selection import SelectFromModel
from sklearn import decomposition
pca = decomposition.PCA()
pca.n_components = 110
train_matrix = pca.fit_transform(train_matrix)
test_matrix = pca.transform(test_matrix)
eval_matrix = pca.transform(eval_matrix)
'''

'''from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
# Don't cheat - fit only on training data
scaler.fit(train_matrix)
train_matrix = scaler.transform(train_matrix)
# apply same transformation to test data
test_matrix = scaler.transform(test_matrix)'''

#from sklearn import preprocessing
#binarizer = preprocessing.Binarizer().fit(train_matrix)  # test accuracy is 83.68%
#train_matrix = preprocessing.normalize(train_matrix, norm='l2')    # test accuracy is 78.19%
#train_matrix = preprocessing.normalize(train_matrix, norm='l1')    # test accuracy is 77.24%
#train_matrix = preprocessing.normalize(train_matrix, norm='max')   # test accuracy is 78.43%
#train_matrix = preprocessing.robust_scale(train_matrix, axis=0, with_centering=True, with_scaling=True, quantile_range=(25.0, 75.0), copy=True)   # test accuracy is 82.14%
#train_matrix = preprocessing.robust_scale(train_matrix, axis=0, with_centering=True, with_scaling=True, quantile_range=(10.0, 90.0), copy=True)    # test accuracy is 82.73%
#train_matrix = preprocessing.robust_scale(train_matrix, axis=0, with_centering=True, with_scaling=True, quantile_range=(0.0, 85.0), copy=True)   #83.2


print 'read the data'

#Simple-Weighted Perceptron with Epochs
learningRate = 0.675;   margin = 0;   maxEpochs = 50; initialWcondition = 'random'#or 'random'
bestLIST = percepFunctions.algoFORepochs(maxEpochs, train_matrix, train_labels, test_matrix, test_labels, 'weightedAggressive', learningRate, initialWcondition, margin)
print 'Epochs = ', bestLIST[1]+1,'    Acc_TRAIN = ',bestLIST[2],'%    f1_TRAIN = ',bestLIST[3],'    Acc_TEST = ',bestLIST[4],'%    f1_TEST = ',bestLIST[5]
#Write leaderboard file with best f1 on training data
solution_filename = raw_input('Enter x__x in ./solutions_log/x__x_solutions.csv: ')
w_val = bestLIST[-1]
eval_pred_labels = projectFunctions.prediction_Perceptron(eval_matrix, eval_labels, w_val)
projectFunctions.write_solutions('perceptron',eval_pred_labels,'./solutions_log/solutions/'+solution_filename+'.solutions.csv')

#cross validation experiment: on rates
'''
delT = 0.0125/2
st = 0.7-0.05+0.0125
ed = 0.6875-0.0125
#tempRateRange = np.arange(st,ed,delT)
tempRateRange = np.arange(0.1,1,0.1)
rateRange = tempRateRange.tolist()
#rateRange = [0,0.00001,0.0001,0.001,0.01,0.1,1]
num_folds = 10
best_f1, best_rate, av_f1_list = crossValidationExperiments.simplePerceptron_cvRate(train_matrix, train_labels, rateRange, num_folds)
#best_accuracy, best_rate, av_accuracy_list = crossValidationExperiments.marginPerceptron_cvRate(train_matrix, train_labels, rateRange, num_folds)
print 'best_f1',best_f1
print 'best_rate',best_rate
print 'av_f1_list',av_f1_list
'''

#cv weights
'''
num_folds = 10
projectFunctions.split_data(train_matrix, train_labels, num_folds)
#cross validation experiment
cvStart = timeit.default_timer
weightRange = ['0.1','0.2','0.3','0.4','0.5','0.6','0.7','0.8','0.9','1',]
num_folds = 5
best_accuracy, best_weight = crossValidationExperiments.simplePerceptron_cvWeight(train_matrix, train_labels, weightRange, num_folds)
cvStop = timeit.default_timer
'''
