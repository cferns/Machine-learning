import percepFunctions
import treeFunctions
import projectFunctions
import percepFunctions
from collections import Counter
import timeit
import crossValidationExperiments
import numpy as np
import featureTRANSFORM
import ensembleFunctions
startTime = timeit.default_timer()

train_matrix, train_labels, test_matrix, test_labels, eval_matrix, eval_labels = featureTRANSFORM.eliminateZEROandNORMALIZE(-1,1,1)#(featureCASE, labelCASE)

#train_matrix, test_matrix, eval_matrix  = projectFunctions.featureTransformation(train_matrix, test_matrix, eval_matrix,1)

print '\n------------------ Decision tree: ------------------'
num_TrainingFEATURES = len(train_matrix[0])
depth_of_tree = 0; limiting_depth = 1000;
to_be_visited = range(num_TrainingFEATURES)
major_trainLABEL = (Counter(train_labels)).most_common(1)[0][0]
train_MATnLBLS = np.c_[np.asarray(train_matrix), np.asarray(train_labels)]#projectFunctions.features_n_labels_matrix(train_matrix, train_labels)
tree = treeFunctions.all_feautres_ID3_tree(train_MATnLBLS, num_TrainingFEATURES, depth_of_tree, to_be_visited, limiting_depth);

depth_list = treeFunctions.find_depths_of_tree(tree); max_depth = max(depth_list)

list_of_labels = list(Counter(train_labels))
predicted_train_list = treeFunctions.predictFUNCTION(tree, train_matrix, list_of_labels, major_trainLABEL)
predicted_test_list = treeFunctions.predictFUNCTION(tree, test_matrix, list_of_labels, major_trainLABEL)
predicted_eval_list = treeFunctions.predictFUNCTION(tree, eval_matrix, list_of_labels, major_trainLABEL)
#
train_accuracy = projectFunctions.accuracyMETRIC(train_labels, predicted_train_list)
dunn, gi, train_f1_score = projectFunctions.f1METRIC(train_labels, predicted_train_list)
test_accuracy = projectFunctions.accuracyMETRIC(test_labels, predicted_test_list)
f,j ,test_f1_score = projectFunctions.f1METRIC(test_labels, predicted_test_list)
print 'Train f1: '
print train_f1_score
print 'Train Accuracy: '
print train_accuracy
print 'Test f1: '
print test_f1_score
print 'Test Accuracy: '
print test_accuracy


stopTime = timeit.default_timer()
print 'time: ', stopTime - startTime

solution_filename = raw_input('Enter x__x in ./solutions_log/x__x_solutions.csv: ')
projectFunctions.write_solutions('decision tree',predicted_eval_list,'./solutions_log/solutions/'+solution_filename+'.solutions.csv')