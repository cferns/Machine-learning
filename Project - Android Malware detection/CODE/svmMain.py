import svmFunctions
import projectFunctions
import timeit
import featureTRANSFORM

#Read original DATA    featureCASE  is 01  or  w    , outputCASE  is -1 or +1
#train_matrix, train_labels, test_matrix, test_labels, eval_matrix, eval_labels = featureTRANSFORM.originalDATA('01',-1)#(featureCASE, labelCASE)
train_matrix, train_labels, test_matrix, test_labels, eval_matrix, eval_labels = featureTRANSFORM.eliminateZEROandNORMALIZE(-1,1,1)#(featureCASE, labelCASE)
'''
startTime = timeit.default_timer()
print 'svm Cross Validation'
Clist = [1,10,100]; Rlist = [0.01,0.001]; num_folds = 10;fixedBESTaccuracy= 0;epochsCVlist = [5]
for epochsCV in epochsCVlist:
    gamma_, C_, accuracy = svmFunctions.crossValidation(train_matrix,train_labels,Clist,Rlist,num_folds,epochsCV)
    print 'reached at epoch', epochsCV
    if accuracy > fixedBESTaccuracy:
        bestEpochs = epochsCV ; bestGamma = gamma_; bestC = C_; bestAccuracy = accuracy
wCV = svmFunctions.SVM(train_matrix, train_labels, epochsCV, bestC, bestGamma)
pred_train_list = svmFunctions.prediction(train_matrix, train_labels, wCV)
pred_test_list = svmFunctions.prediction(test_matrix, test_labels, wCV)
acc_train = svmFunctions.accuracyMETRIC(train_labels, pred_train_list)
acc_test = svmFunctions.accuracyMETRIC(test_labels, pred_test_list)
dummyP, dummyR, f1_train = projectFunctions.f1METRIC(train_labels, pred_train_list)
dummyP, dummyR, f1_test = projectFunctions.f1METRIC(test_labels, pred_test_list)
print 'Best gamma(0) : ', bestGamma,'    Best C: ', bestC,'    Best epochs: ', bestEpochs,'   Train Acc:', acc_train,'   Train f1:', f1_train,'    Test Acc', acc_test,'%   Test f1:', f1_test
endTime = timeit.default_timer(); print 'Total run time: ', endTime - startTime,'secs'
'''

print 'Final Support Vector Machines:'
epochsFINAL = 20; CFINAL = 11000;gammaFINAL = 1e-06
wFINAL = svmFunctions.SVM(train_matrix,train_labels, epochsFINAL, CFINAL, gammaFINAL)
pred_train_list = projectFunctions.prediction_Perceptron(train_matrix, train_labels, wFINAL)
pred_test_list = projectFunctions.prediction_Perceptron(test_matrix, test_labels, wFINAL)
acc_train = projectFunctions.accuracyMETRIC(train_labels, pred_train_list)
acc_test = projectFunctions.accuracyMETRIC(test_labels, pred_test_list)
dummyP, dummyR, f1_train = projectFunctions.f1METRIC(train_labels, pred_train_list)
dummyP, dummyR, f1_test = projectFunctions.f1METRIC(test_labels, pred_test_list)
print '\tBest gamma(0) : ', gammaFINAL,'    Best C: ', CFINAL,'   Train Acc:', acc_train,'   Train f1:', f1_train,'    Test Acc', acc_test,'%   Test f1:', f1_test

1e-06